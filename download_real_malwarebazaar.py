#!/usr/bin/env python3
"""
DOWNLOAD REAL MALWARE FROM MALWAREBazaar API
Using the correct API endpoints and authentication
"""

import os
import sys
import numpy as np
import pickle
from pathlib import Path
import requests
import base64
import json
import time
from colorama import init, Fore, Style

# Initialize colorama
init()

# MalwareBazaar API configuration
MALWAREBazaar_API_KEY = "8a2f747dda2a897ff663a49933a4ef35774bb589037f2760"
MALWAREBazaar_BASE_URL = "https://bazaar.abuse.ch/api"

def load_model():
    """Load the real model."""
    try:
        models_dir = "retrained_models"
        model_files = list(Path(models_dir).glob("real_model_*.pkl"))
        metadata_files = list(Path(models_dir).glob("real_metadata_*.pkl"))
        
        if not model_files or not metadata_files:
            print(f"{Fore.RED}‚ùå No real models found!")
            return None, None
        
        latest_model = max(model_files, key=lambda x: x.stat().st_mtime)
        latest_metadata = max(metadata_files, key=lambda x: x.stat().st_mtime)
        
        with open(latest_model, 'rb') as f:
            model = pickle.load(f)
        
        with open(latest_metadata, 'rb') as f:
            metadata = pickle.load(f)
        
        print(f"{Fore.GREEN}‚úÖ Model loaded: {latest_model.name}")
        return model, metadata
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error loading model: {e}")
        return None, None

def extract_features(data):
    """Extract features from data."""
    try:
        if len(data) == 0:
            return None
        
        file_size = len(data)
        data_array = np.frombuffer(data, dtype=np.uint8)
        byte_counts = np.bincount(data_array, minlength=256)
        byte_probs = byte_counts / len(data)
        entropy = -np.sum(byte_probs * np.log2(byte_probs + 1e-10))
        
        printable_chars = sum(1 for byte in data if 32 <= byte <= 126)
        printable_ratio = printable_chars / len(data)
        
        strings_count = len([b for b in data if 32 <= b <= 126])
        
        string_lengths = []
        current_string = 0
        for byte in data:
            if 32 <= byte <= 126:
                current_string += 1
            else:
                if current_string > 0:
                    string_lengths.append(current_string)
                    current_string = 0
        avg_string_length = np.mean(string_lengths) if string_lengths else 0
        max_string_length = max(string_lengths) if string_lengths else 0
        
        histogram = np.bincount(data_array, minlength=256)
        histogram_normalized = histogram / len(data)
        histogram_regularity = 1 - np.std(histogram_normalized)
        
        chunk_size = min(1024, len(data) // 10)
        if chunk_size > 0:
            entropies = []
            for i in range(0, len(data), chunk_size):
                chunk = data[i:i+chunk_size]
                if len(chunk) > 0:
                    chunk_array = np.frombuffer(chunk, dtype=np.uint8)
                    chunk_counts = np.bincount(chunk_array, minlength=256)
                    chunk_probs = chunk_counts / len(chunk)
                    chunk_entropy = -np.sum(chunk_probs * np.log2(chunk_probs + 1e-10))
                    entropies.append(chunk_entropy)
            entropy_consistency = 1 - np.std(entropies) if entropies else 0.5
        else:
            entropy_consistency = 0.5
        
        features = {
            'file_size': file_size,
            'entropy': entropy,
            'strings_count': strings_count,
            'avg_string_length': avg_string_length,
            'max_string_length': max_string_length,
            'printable_ratio': printable_ratio,
            'histogram_regularity': histogram_regularity,
            'entropy_consistency': entropy_consistency
        }
        
        return features
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error extracting features: {e}")
        return None

def predict(model, metadata, features):
    """Predict using the model."""
    try:
        feature_cols = metadata.get('feature_cols', [])
        feature_array = np.array([features[col] for col in feature_cols]).reshape(1, -1)
        
        probability = model.predict(feature_array, num_iteration=model.best_iteration)[0]
        prediction = 1 if probability > 0.5 else 0
        
        return prediction, probability
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Prediction error: {e}")
        return 0, 0.5

def get_recent_malware_samples(limit=10):
    """Get recent malware samples from MalwareBazaar."""
    print(f"{Fore.CYAN}üîÑ Fetching recent malware samples from MalwareBazaar...")
    
    try:
        url = f"{MALWAREBazaar_BASE_URL}/recent"
        params = {
            'limit': limit,
            'key': MALWAREBazaar_API_KEY
        }
        
        print(f"{Fore.YELLOW}üì° Connecting to MalwareBazaar API...")
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and data['data']:
                print(f"{Fore.GREEN}‚úÖ Found {len(data['data'])} recent malware samples")
                return data['data']
            else:
                print(f"{Fore.RED}‚ùå No data in response")
                return []
        else:
            print(f"{Fore.RED}‚ùå HTTP Error: {response.status_code}")
            print(f"Response: {response.text}")
            return []
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error fetching samples: {e}")
        return []

def get_malware_details(sha256_hash):
    """Get detailed information about a malware sample."""
    try:
        url = f"{MALWAREBazaar_BASE_URL}/file"
        params = {
            'hash': sha256_hash,
            'key': MALWAREBazaar_API_KEY
        }
        
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data:
                return data['data']
            else:
                print(f"{Fore.RED}‚ùå No data in response")
                return None
        else:
            print(f"{Fore.RED}‚ùå HTTP Error: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error getting malware details: {e}")
        return None

def download_malware_file(sha256_hash):
    """Download malware file content from MalwareBazaar."""
    try:
        url = f"{MALWAREBazaar_BASE_URL}/download"
        params = {
            'hash': sha256_hash,
            'key': MALWAREBazaar_API_KEY
        }
        
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            # Check if response is binary data
            if response.headers.get('content-type', '').startswith('application/'):
                return response.content
            else:
                # Try to parse as JSON and extract file content
                try:
                    data = response.json()
                    if 'data' in data and 'file_content' in data['data']:
                        return base64.b64decode(data['data']['file_content'])
                except:
                    pass
                
                print(f"{Fore.YELLOW}‚ö†Ô∏è  Could not extract file content from response")
                return None
        else:
            print(f"{Fore.RED}‚ùå HTTP Error: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error downloading malware file: {e}")
        return None

def search_malware_samples(query="exe", limit=10):
    """Search for malware samples."""
    print(f"{Fore.CYAN}üîÑ Searching for malware samples...")
    
    try:
        url = f"{MALWAREBazaar_BASE_URL}/search"
        params = {
            'query': query,
            'limit': limit,
            'key': MALWAREBazaar_API_KEY
        }
        
        response = requests.get(url, params=params, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and data['data']:
                print(f"{Fore.GREEN}‚úÖ Found {len(data['data'])} malware samples")
                return data['data']
            else:
                print(f"{Fore.RED}‚ùå No data in response")
                return []
        else:
            print(f"{Fore.RED}‚ùå HTTP Error: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"{Fore.RED}‚ùå Error searching samples: {e}")
        return []

def main():
    """Main function."""
    print(f"{Fore.CYAN}üõ°Ô∏è  DOWNLOAD REAL MALWARE FROM MALWAREBazaar API")
    print(f"{Fore.CYAN}{'='*60}")
    
    # Load model
    print(f"\n{Fore.CYAN}üì¶ Loading model...")
    model, metadata = load_model()
    if not model or not metadata:
        print(f"{Fore.RED}‚ùå Failed to load model!")
        return
    
    # Try to get recent malware samples
    print(f"\n{Fore.CYAN}üîÑ Attempting to download real malware...")
    
    # First try recent samples
    malware_samples = get_recent_malware_samples(limit=10)
    
    if not malware_samples:
        # Try searching for .exe samples
        print(f"{Fore.YELLOW}‚ö†Ô∏è  No recent samples, trying search...")
        malware_samples = search_malware_samples(query="exe", limit=10)
    
    if not malware_samples:
        print(f"{Fore.RED}‚ùå No malware samples available from MalwareBazaar!")
        return
    
    # Create test directory
    test_dir = Path("real_malwarebazaar_downloads")
    test_dir.mkdir(exist_ok=True)
    
    # Test samples
    print(f"\n{Fore.YELLOW}üìä DOWNLOADING AND TESTING REAL MALWARE:")
    print(f"{Fore.YELLOW}{'='*50}")
    
    results = []
    downloaded_count = 0
    
    # Test first 10 malware samples
    for i, sample in enumerate(malware_samples[:10]):
        sha256_hash = sample.get('sha256', '')
        file_name = sample.get('file_name', f'sample_{i}')
        file_type = sample.get('file_type', 'unknown')
        file_size = sample.get('file_size', 0)
        
        print(f"\nüîç Sample {i+1}/10: {file_name}")
        print(f"   Type: {file_type}")
        print(f"   Size: {file_size:,} bytes")
        print(f"   SHA256: {sha256_hash[:16]}...")
        
        # Get detailed malware information
        print(f"   üì• Getting malware details...")
        malware_details = get_malware_details(sha256_hash)
        
        if malware_details:
            print(f"   üìä Malware family: {malware_details.get('malware_family', 'unknown')}")
            print(f"   üìä Tags: {malware_details.get('tags', [])}")
        
        # Download the malware file
        print(f"   üì• Downloading malware file...")
        file_content = download_malware_file(sha256_hash)
        
        if file_content:
            # Save the sample
            file_path = test_dir / f"malwarebazaar_{i}_{file_name}"
            
            with open(file_path, 'wb') as f:
                f.write(file_content)
            
            print(f"   üíæ Saved: {file_path}")
            print(f"   üìä Actual size: {len(file_content):,} bytes")
            
            # Test the sample
            print(f"   üîç Analyzing...")
            features = extract_features(file_content)
            
            if features:
                prediction, probability = predict(model, metadata, features)
                
                status = "MALWARE" if prediction == 1 else "BENIGN"
                confidence = probability if prediction == 1 else (1 - probability)
                
                print(f"   ‚úÖ Result: {status} ({confidence:.1%} confidence)")
                print(f"   üìä Entropy: {features['entropy']:.2f}")
                print(f"   üìä Printable ratio: {features['printable_ratio']:.2f}")
                
                results.append({
                    'name': file_name,
                    'type': file_type,
                    'sha256': sha256_hash,
                    'family': malware_details.get('malware_family', 'unknown') if malware_details else 'unknown',
                    'tags': malware_details.get('tags', []) if malware_details else [],
                    'prediction': prediction,
                    'probability': probability,
                    'expected': 1,  # Should be malware
                    'correct': prediction == 1,
                    'features': features,
                    'actual_size': len(file_content)
                })
                
                downloaded_count += 1
            else:
                print(f"   ‚ùå Failed to extract features")
        else:
            print(f"   ‚ùå Failed to download malware file")
    
    # Summary
    print(f"\n{Fore.CYAN}{'='*60}")
    print(f"{Fore.CYAN}üìä MALWAREBazaar REAL MALWARE DOWNLOAD TEST RESULTS:")
    print(f"{Fore.CYAN}{'='*60}")
    
    print(f"üìä Download Summary:")
    print(f"   Malware samples found: {len(malware_samples)}")
    print(f"   Samples attempted: {len(malware_samples[:10])}")
    print(f"   Successfully downloaded: {downloaded_count}")
    print(f"   Successfully tested: {len(results)}")
    
    if results:
        detected = sum(1 for r in results if r['correct'])
        accuracy = detected / len(results)
        
        print(f"\nüìä Detection Results:")
        print(f"   Samples tested: {len(results)}")
        print(f"   Correctly detected: {detected}")
        print(f"   Detection rate: {accuracy:.1%}")
        
        # Show details for each sample
        print(f"\nüìä Sample Details:")
        for result in results:
            status = "‚úÖ DETECTED" if result['correct'] else "‚ùå MISSED"
            print(f"   {result['name']} ({result['type']}): {status}")
            print(f"      Family: {result['family']}")
            print(f"      Tags: {result['tags']}")
            print(f"      Size: {result['actual_size']:,} bytes, Entropy: {result['features']['entropy']:.2f}")
        
        # Final verdict
        if accuracy > 0.9:
            print(f"\n{Fore.GREEN}‚úÖ EXCELLENT: Model detects real MalwareBazaar malware!")
            print(f"{Fore.GREEN}   Detection rate: {accuracy:.1%}")
        elif accuracy > 0.8:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è  GOOD: Model has good detection rate")
            print(f"{Fore.YELLOW}   Detection rate: {accuracy:.1%}")
        elif accuracy > 0.6:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è  ACCEPTABLE: Model has decent detection rate")
            print(f"{Fore.YELLOW}   Detection rate: {accuracy:.1%}")
        else:
            print(f"\n{Fore.RED}‚ùå POOR: Model needs improvement")
            print(f"{Fore.RED}   Detection rate: {accuracy:.1%}")
    else:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è  No samples tested successfully")
    
    print(f"\n{Fore.GREEN}üéâ MalwareBazaar real malware download test completed!")
    print(f"{Fore.CYAN}üìÅ Downloaded samples saved in: {test_dir}")

if __name__ == "__main__":
    main()