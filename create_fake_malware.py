#!/usr/bin/env python3
"""
Create 2,500 fake malware files for training dataset
Safe, harmless patterns that simulate malware behavior
"""

import random
import string
from pathlib import Path
from typing import List, Dict

# Malware file templates
MALWARE_TEMPLATES = {
    'keylogger': {
        'extensions': ['.exe', '.bat', '.ps1', '.vbs'],
        'patterns': [
            'Set WshShell = CreateObject("WScript.Shell")',
            'WshShell.SendKeys "{text}"',
            'keylogger.exe',
            'stealth_mode = True',
            'log_keystrokes()'
        ]
    },
    'ransomware': {
        'extensions': ['.exe', '.bat', '.ps1', '.vbs', '.py'],
        'patterns': [
            'encrypt_files()',
            'ransom_note.txt',
            'bitcoin_address = "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"',
            'decrypt_key = "random_key_here"',
            'file_extension = ".encrypted"'
        ]
    },
    'trojan': {
        'extensions': ['.exe', '.dll', '.bat', '.ps1'],
        'patterns': [
            'backdoor_connection()',
            'remote_access = True',
            'stealth_mode = True',
            'system_integration()',
            'persistence_install()'
        ]
    },
    'worm': {
        'extensions': ['.exe', '.bat', '.vbs', '.ps1'],
        'patterns': [
            'spread_to_network()',
            'find_vulnerable_hosts()',
            'copy_to_shared_drives()',
            'email_propagation()',
            'registry_persistence()'
        ]
    },
    'spyware': {
        'extensions': ['.exe', '.dll', '.bat', '.ps1'],
        'patterns': [
            'monitor_browser_history()',
            'capture_screenshots()',
            'log_passwords()',
            'track_user_activity()',
            'send_data_to_server()'
        ]
    }
}

# Suspicious filenames
SUSPICIOUS_NAMES = [
    'keylogger', 'ransom', 'trojan', 'worm', 'spyware', 'backdoor',
    'hack', 'crack', 'steal', 'stealer', 'password', 'credential',
    'bank', 'credit', 'card', 'wallet', 'bitcoin', 'crypto',
    'cheat', 'hacktool', 'cracker', 'keygen', 'patch', 'cracked',
    'free', 'premium', 'unlock', 'bypass', 'admin', 'root',
    'system', 'kernel', 'driver', 'service', 'daemon', 'bot',
    'miner', 'cryptominer', 'malware', 'virus', 'infect', 'spread'
]

# Safe content patterns (harmless but realistic)
SAFE_PATTERNS = [
    'echo "This is a test file"',
    'print("Hello World")',
    'console.log("Debug info")',
    'System.out.println("Test")',
    'printf("Testing...")',
    'MsgBox "Test message"',
    'Write-Host "PowerShell test"',
    'print("Python test script")',
    'echo "Batch file test"',
    'alert("JavaScript test")'
]

def generate_random_content(malware_type: str, size_kb: int) -> str:
    """Generate realistic but harmless malware-like content."""
    template = MALWARE_TEMPLATES[malware_type]
    patterns = template['patterns'] + SAFE_PATTERNS
    
    # Generate content based on size
    content_lines = []
    
    # Add header
    if malware_type == 'keylogger':
        content_lines.append('REM Keylogger Simulation (HARMLESS)')
        content_lines.append('Set WshShell = CreateObject("WScript.Shell")')
    elif malware_type == 'ransomware':
        content_lines.append('REM Ransomware Simulation (HARMLESS)')
        content_lines.append('echo "This is a test ransomware simulation"')
    elif malware_type == 'trojan':
        content_lines.append('REM Trojan Simulation (HARMLESS)')
        content_lines.append('echo "This is a test trojan simulation"')
    elif malware_type == 'worm':
        content_lines.append('REM Worm Simulation (HARMLESS)')
        content_lines.append('echo "This is a test worm simulation"')
    elif malware_type == 'spyware':
        content_lines.append('REM Spyware Simulation (HARMLESS)')
        content_lines.append('echo "This is a test spyware simulation"')
    
    # Add random patterns
    num_patterns = min(size_kb // 2, len(patterns))
    selected_patterns = random.sample(patterns, num_patterns)
    
    for pattern in selected_patterns:
        content_lines.append(pattern)
    
    # Add filler content to reach target size
    while len('\n'.join(content_lines)) < size_kb * 1024:
        filler = random.choice(SAFE_PATTERNS)
        content_lines.append(filler)
    
    return '\n'.join(content_lines)

def create_fake_malware_files(count: int = 2500):
    """Create fake malware files for training dataset."""
    malware_dir = Path("test_files/malware")
    malware_dir.mkdir(exist_ok=True)
    
    print(f"ðŸ¦  Creating {count} fake malware files...")
    
    malware_types = list(MALWARE_TEMPLATES.keys())
    
    for i in range(count):
        # Random malware type
        malware_type = random.choice(malware_types)
        template = MALWARE_TEMPLATES[malware_type]
        
        # Random extension
        extension = random.choice(template['extensions'])
        
        # Random filename
        base_name = random.choice(SUSPICIOUS_NAMES)
        suffix = ''.join(random.choices(string.digits, k=3))
        filename = f"{base_name}_{suffix}{extension}"
        
        # Random size (1KB - 10MB)
        size_kb = random.randint(1, 10240)
        
        # Generate content
        content = generate_random_content(malware_type, size_kb)
        
        # Save file
        file_path = malware_dir / filename
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        if (i + 1) % 100 == 0:
            print(f"  âœ… Created {i + 1}/{count} files")
    
    print(f"ðŸŽ¯ Created {count} fake malware files in {malware_dir}")

if __name__ == "__main__":
    create_fake_malware_files()